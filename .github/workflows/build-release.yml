name: Build and Release Electron App

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write
  discussions: write

jobs:
  build-web:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Clean npm cache and install dependencies
        run: |
          npm cache clean --force
          rm -rf node_modules package-lock.json
          npm install --legacy-peer-deps

      - name: Update package version
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          npm version $VERSION --no-git-tag-version
          echo "Updated version to $VERSION"

      - name: Build Web app
        run: npm run build
        env:
          VITE_APP_VERSION: ${{ github.ref_name }}
          NODE_OPTIONS: --max-old-space-size=4096
          ROLLUP_WATCH: false

      - name: Upload web build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: dist/
          retention-days: 7

  deploy-pages:
    needs: build-web
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Download web build artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: ./dist

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
        id: deployment

  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: mac
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Clean npm cache and install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          npm cache clean --force
          rm -rf node_modules package-lock.json
          npm install --legacy-peer-deps

      - name: Update package version (Linux)
        if: matrix.os == 'ubuntu-latest' && startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          npm version $VERSION --no-git-tag-version
          echo "Updated version to $VERSION"

      - name: Clean npm cache and install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          npm cache clean --force
          if (Test-Path node_modules) { Remove-Item -Recurse -Force node_modules }
          if (Test-Path package-lock.json) { Remove-Item package-lock.json }
          npm install --legacy-peer-deps
          npm install vite@^7.0.4 --save-dev
          npm rebuild

      - name: Update package version (Windows)
        if: matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/v')
        shell: powershell
        run: |
          $version = $env:GITHUB_REF -replace 'refs/tags/v', ''
          npm version $version --no-git-tag-version
          Write-Host "Updated version to $version"

      - name: Verify Vite installation (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          Write-Host "Checking npm list..."
          npm list vite
          Write-Host "Checking node_modules\.bin..."
          Get-ChildItem node_modules\.bin\vite*
          Write-Host "Checking PATH..."
          $env:PATH
          Write-Host "Checking if vite.cmd exists..."
          if (Test-Path node_modules\.bin\vite.cmd) { Write-Host "vite.cmd found" } else { Write-Host "vite.cmd NOT found" }
          Write-Host "Trying npx vite version..."
          npx vite --version

      - name: Add node_modules to PATH (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          $currentPath = $env:PATH
          $nodeModulesBin = "$(pwd)\node_modules\.bin"
          $env:PATH = "$nodeModulesBin;$currentPath"
          Write-Host "Updated PATH: $env:PATH"

      - name: Clean npm cache and install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          npm cache clean --force
          rm -rf node_modules package-lock.json
          npm install --legacy-peer-deps

      - name: Update package version (macOS)
        if: matrix.os == 'macos-latest' && startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          npm version $VERSION --no-git-tag-version
          echo "Updated version to $VERSION"

      - name: Verify installations
        run: |
          npm list vite
          npm list @vitejs/plugin-react
        continue-on-error: true

      - name: Build React app (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: npm run build:react
        env:
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Build React app (Non-Windows)
        if: matrix.os != 'windows-latest'
        run: npm run build
        env:
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Build Electron app
        run: npm run build:${{ matrix.platform }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build
          path: release/
          retention-days: 7

  release:
    needs: [build-web, build, deploy-pages]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      discussions: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Display downloaded files
        run: find artifacts/ -type f -exec ls -la {} \;

      - name: Remove duplicate files and debug files
        run: |
          # Remove debug files that shouldn't be in release
          find artifacts/ -name "builder-debug.yml" -delete || true
          find artifacts/ -name "builder-effective-config.yaml" -delete || true
          find artifacts/ -name "*.blockmap" -delete || true

          # List final files for upload
          echo "Files to be uploaded:"
          find artifacts/ -type f -exec basename {} \; | sort | uniq -c | sort -nr

      - name: Delete existing release if exists
        continue-on-error: true
        run: |
          gh release delete ${{ github.ref_name }} --yes || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create web app archive
        run: |
          cd artifacts/web-build
          zip -r ../../oji-web-${{ github.ref_name }}.zip .
          cd ../..

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/mac-build/*.dmg
            artifacts/mac-build/*.zip
            artifacts/win-build/*.exe
            artifacts/win-build/*Setup*.exe
            artifacts/linux-build/*.AppImage
            artifacts/linux-build/*.deb
            artifacts/linux-build/*.rpm
            oji-web-${{ github.ref_name }}.zip
          body: |
            ## üöÄ Oji ${{ github.ref_name }}

            Cross-platform desktop application and web app release

            ### üì• Downloads

            #### üñ•Ô∏è Desktop Versions
            - **macOS**: Download `.dmg` file (supports Intel and Apple Silicon)
            - **Windows**: Download `.exe` installer
            - **Linux**: Download `.AppImage`, `.deb`, or `.rpm` package

            #### üåê Web Version
            - **Online Access**: [https://${{ github.repository_owner }}.github.io/Oji-Assistant](https://${{ github.repository_owner }}.github.io/Oji-Assistant)
            - **Offline Deployment**: Download `oji-web-${{ github.ref_name }}.zip` file

            ### üõ†Ô∏è Installation Instructions

            #### üñ•Ô∏è Desktop Versions

            **macOS**
            1. Download the `.dmg` file
            2. Open the downloaded file
            3. Drag the app to Applications folder

            **Windows**
            1. Download the `.exe` installer
            2. Run the installer and follow the setup wizard

            **Linux**
            - **AppImage**: Download and add execute permission with `chmod +x`, then run directly
            - **DEB** (Ubuntu/Debian): Install using `sudo dpkg -i filename.deb`
            - **RPM** (Fedora/RHEL): Install using `sudo rpm -i filename.rpm`

            #### üåê Web Version

            **Online Usage**
            - Simply visit the link above to use Oji in your browser

            **Local Deployment**
            1. Download the `oji-web-${{ github.ref_name }}.zip` file
            2. Extract to your web server directory
            3. Access through web server (nginx, apache, or simple `python -m http.server`)

            **Docker Deployment**
            ```bash
            # Extract web files
            unzip oji-web-${{ github.ref_name }}.zip -d oji-web

            # Deploy using nginx container
            docker run -d -p 8080:80 -v $(pwd)/oji-web:/usr/share/nginx/html nginx

            # Access at http://localhost:8080
            ```

            ### ‚öôÔ∏è Configuration Notes
            - Web and desktop versions have identical functionality
            - Requires proper AI service endpoint URL configuration
            - Web version supports all modern browsers
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
